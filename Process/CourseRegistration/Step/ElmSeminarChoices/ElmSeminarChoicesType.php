<?php
namespace Ice\FormBundle\Process\CourseRegistration\Step\ElmSeminarChoices;

use Ice\JanusClientBundle\Exception\ValidationException;
use JMS\Serializer\Tests\Fixtures\Person;
use Symfony\Component\Form\FormError;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Form\FormBuilderInterface;
use Ice\FormBundle\Process\CourseRegistration\Step\AbstractRegistrationStep;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\MinLength;
use Symfony\Component\Validator\Constraints\NotBlank;
use Ice\JanusClientBundle\Entity\User;

class ElmSeminarChoicesType extends AbstractRegistrationStep
{
    protected $childFormOrder = [
        1 => 'seminarChoicesFirstChoice',
        2 => 'seminarChoicesSecondChoice',
        3 => 'seminarChoicesThirdChoice',
        4 => 'seminarChoicesPersonalStatement'
    ];

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('seminarChoicesFirstChoice', 'choice', array(
                    'choices'=>$this->getChoices(),
                    'expanded'=>false,
                    'multiple'=>false,
                    'required'=>false,
                    'label'=>'First choice'
                )
            )
            ->add('seminarChoicesSecondChoice', 'choice', array(
                    'choices'=>$this->getChoices(),
                    'expanded'=>false,
                    'multiple'=>false,
                    'required'=>false,
                    'label'=>'Second choice'
                )
            )
            ->add('seminarChoicesThirdChoice', 'choice', array(
                    'choices'=>$this->getChoices(),
                    'expanded'=>false,
                    'multiple'=>false,
                    'required'=>false,
                    'label'=>'Third choice'
                )
            )
            ->add('seminarChoicesPersonalStatement', 'textarea', array(
                'label' => 'Please state briefly (200 words maximum) what you hope to gain from this course. ',
                'required' => true))
            ;
        parent::buildForm($builder, $options); // TODO: Change the autogenerated stub
    }

    protected function getChoices()
    {
        return array(
            'Civil Procedure' => 'Civil Procedure',
            'Company Law' => 'Company Law',
            'Constitutional and Administrative Law' => 'Constitutional and Administrative Law',
            'Criminal Law' => 'Criminal Law',
            'Law of Contract' => 'Law of Contract',
            'Law of Torts' => 'Law of Torts',
            'Law of Trusts' => 'Law of Trusts',
            'Private International Law' => 'Private International Law'
        );
    }

    public function getTitle()
    {
        return 'Seminar choices';
    }

    public function getHtmlTemplate()
    {
        return 'ElmSeminarChoices.html.twig';
    }

    public function renderHtml(array $vars = array())
    {
        $vars['seminarChoices'] = $this->getChoices();
        return parent::renderHtml($vars);
    }

    /**
     * Sets up entities, pre-populates fields
     *
     * @return mixed
     */
    public function prepare()
    {
        if ($this->getStepProgress()->getUpdated()) {
            $contact = ElmSeminarChoices::fromStepProgress($this->getStepProgress());
        } else {
            $contact = new ElmSeminarChoices();
        }
        $this->setEntity($contact);
        $this->setPrepared();
    }
}